---
- name: "validate configuration"
  assert:
    that:
      - funkwhale_domain is defined

- name: "install pre packages"
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - git
    - unzip
    - curl
    - python3
    - python3-pip

- name: "Set OS distribution dependent variables"
  include_vars: "{{ ansible_facts['distribution'] }}.yml"

- name: "Install packages"
  include_tasks: "install_{{ ansible_facts['distribution'] }}.yml"


- name: "check out master branch"
  git:
    repo: 'https://dev.funkwhale.audio/funkwhale/funkwhale'
    dest: /srv/funkwhale
    version: 1.2.1
  register: cloning_funkwhale

- debug:
    var: cloning_funkwhale

- name: "Add the user"
  user:
    name: funkwhale
    shell: /usr/bin/nologin
    home: /srv/funkwhale

- name: "Install wheel to virtualenv"
  pip:
    name: wheel
    virtualenv: /srv/funkwhale/virtualenv
    virtualenv_command: /usr/bin/python3 -m venv
  when: cloning_funkwhale.changed

- name: "Upgrade pip to the last version"
  pip:
    name: pip
    virtualenv: /srv/funkwhale/virtualenv
    virtualenv_command: /usr/bin/python3 -m venv
    extra_args: --upgrade pip
  register: venv_upgrade
  when: cloning_funkwhale.changed

- name: "Install requirements"
  pip:
    requirements: /srv/funkwhale/api/requirements.txt
    virtualenv: /srv/funkwhale/virtualenv
    virtualenv_command: /usr/bin/python3 -m venv
  when: venv_upgrade.changed and cloning_funkwhale.changed
  register: venv_req

- name: "Install pyopenssl to virtualenv"
  pip:
    name: pyopenssl
    virtualenv: /srv/funkwhale/virtualenv
    virtualenv_command: /usr/bin/python3 -m venv
    extra_args: --upgrade pip
  when: cloning_funkwhale.changed and venv_upgrade.changed  # and venv_req.changed


# TODO postgres and redis must be on the same host
- name: "Configure beat systemd service"
  template:
    src: funkwhale-beat.service.j2
    dest: "/etc/systemd/system/funkwhale-beat.service"


- name: "Configure server systemd service"
  template:
    src: funkwhale-server.service.j2
    dest: "/etc/systemd/system/funkwhale-server.service"


- name: "Configure worker systemd service"
  template:
    src: funkwhale-worker.service.j2
    dest: "/etc/systemd/system/funkwhale-worker.service"


- name: "Configure systemd target"
  template:
    src: funkwhale.target.j2
    dest: "/etc/systemd/system/funkwhale.target"

- name: "Create config directory"
  file:
    path: /srv/funkwhale/config
    owner: funkwhale
    group: root
    state: directory

- name: "Configure service"
  template:
    src: env.j2
    dest: "/srv/funkwhale/config/.env"
    owner: funkwhale
    group: root
    mode: 0600

- name: "Run an initial migration"
  django_manage:
    command: migrate
    app_path: "/srv/funkwhale/api"
    pythonpath: "/usr/bin/python3"
    virtualenv: "/srv/funkwhale/virtualenv"
  # tags: molecule-notest
  notify:
    - nginx systemd

- name: "Systemd units are enabled"
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: started
  loop:
    - funkwhale-server.service
    - redis.service
    - nginx.service
  register: result_systemd

- name: "Check for proper.front.response"
  uri:
    url: http://localhost/
    return_content: true
    method: GET
    status_code: 200
  register: result_front
  until: '"Welcome to" in result_front.content'
  retries: 3
  delay: 1

- debug:
    var: result_front

- name: "Check result proper Front response"
  assert:
    that:
      - not result_front.changed
    fail_msg: "'Fail' on {{inventory_hostname}} {{ ansible_eth0.ipv4.address }}"
    success_msg: "'Success' on {{inventory_hostname}} {{ ansible_eth0.ipv4.address }}"
- name: "Systemd units are enabled"
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: started
  loop:
    - funkwhale-server.service
    - redis.service
    - nginx.service
  register: result_systemd

